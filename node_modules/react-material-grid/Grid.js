'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

require('./layout.css');

require('./layouts.css');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _ramda = require('ramda');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PropTypes = _react2.default.PropTypes;


var camelToDash = function camelToDash(string) {
  return string.replace(/([A-Z])/g, function (substr, match) {
    return '-' + match.toLowerCase();
  });
};

var combineValueAndAttr = function combineValueAndAttr(attrName, attrValue) {
  var value = attrValue;
  if ((0, _ramda.is)(String, value)) {
    value = (0, _ramda.join)('-', (0, _ramda.split)(/\s+/, attrValue));
  }

  return camelToDash(attrName) + '-' + value;
};

var gridPropsRegexp = /^flex|^layout|^hide/;

var propProcessors = {
  flex: function flex(value) {
    if (!value || value === 'flex' || value === true) {
      return 'flex';
    } else {
      return combineValueAndAttr('flex', value);
    }
  },
  default: function _default(value, attrName) {
    if (value && value !== attrName && value !== true) {
      return combineValueAndAttr(attrName, value);
    } else {
      return camelToDash(attrName);
    }
  }
};

var Grid = function Grid(props) {

  var passingProps = {};

  var classes = (0, _ramda.map)(function (attrName) {
    if (attrName.match(gridPropsRegexp)) {
      var processor = propProcessors[attrName] || propProcessors.default;
      return processor(props[attrName], attrName);
    } else {
      passingProps[attrName] = props[attrName];
    }
  }, (0, _ramda.keys)(props)).join(' ').concat(props.className || '');

  if (props.element) {
    return _react2.default.createElement(
      props.element,
      _extends({}, passingProps, { className: classes }),
      props.children
    );
  } else {
    return _react2.default.createElement(
      'div',
      _extends({}, passingProps, { className: classes }),
      props.children
    );
  }
};

var attrSizedProptypesGenerator = function attrSizedProptypesGenerator(attrName, type) {
  var sizes = ['Xs', 'GtXs', 'Sm', 'GtSm', 'Md', 'GtMd', 'Lg', 'GtLg', 'Xl'];
  return (0, _ramda.reduce)(function (types, size) {
    types['' + attrName + size] = type;
    return types;
  }, {}, sizes);
};

Grid.propTypes = _extends({
  flex: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.bool])
}, attrSizedProptypesGenerator('flex', PropTypes.oneOfType([PropTypes.string, PropTypes.number])), {

  flexOffset: PropTypes.number
}, attrSizedProptypesGenerator('flexOffset', PropTypes.number), {

  flexOrder: PropTypes.number
}, attrSizedProptypesGenerator('flexOrder', PropTypes.number), {

  layout: PropTypes.string
}, attrSizedProptypesGenerator('layout', PropTypes.string), {

  layoutAlign: PropTypes.string
}, attrSizedProptypesGenerator('layoutAlign', PropTypes.string), attrSizedProptypesGenerator('hide', PropTypes.string), attrSizedProptypesGenerator('show', PropTypes.string), {

  layoutWrap: PropTypes.string,

  element: PropTypes.element
});

exports.default = Grid;
